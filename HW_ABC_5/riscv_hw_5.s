.data

.text

main:
    li a0, 1            # Инициализация регистра a0 значением 1 (входной аргумент)
    li t0, 1            # Инициализация t0 значением 1 (результат факториала)
    li t1, 1            # Инициализация t1 значением 1 (начальное значение для вычисления факториала)

factorial:
    mulh t4, t0, t1     # Перемножение t0 и t1, результат верхней половины сохраняется в t4
    mul t2, t0, t1      # Перемножение t0 и t1, результат сохраняется в t2 (часть нижней половины)
    li a7, 1            # Подготовка системного вызова для вывода
    mv a0, t3           # Передача значения t3 для вывода
    bnez t4, game_over       # Если t4 не равен 0 (переполнение), переход к метке end
    j next_step         # Иначе продолжаем цикл

next_step:
    mv t0, t2           # Обновляем t0 новым значением (результат умножения)
    mv t3, t1           # Обновляем t3 значением текущего множителя
    addi t1, t1, 1      # Увеличиваем t1 на 1 для следующей итерации
    j factorial         # Переход к началу цикла для вычисления следующего шага факториала

game_over:
    mv a0, t3          
    li a7, 1
    ecall
    li a7, 10          
    ecall
